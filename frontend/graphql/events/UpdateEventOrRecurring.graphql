mutation UpdateEventOrRecurring ($updateEventData: UpdateEventOrRecurringInput!) {
  UpdateEventOrRecurring(updateEventData: $updateEventData) {
    status
    message
  }
}

# Single To Recurring: event.recurr_id = null, 'id' not in recurringData or null
# Uses event data, pwas, vols and recurring specific fields from recurringData
#
# Recurring To Single: event.recurr_id = null, 'id' is in recurringData
# Uses event data, pwas, vols and recurringData.start_date if found else event.date
#
# Updating Single Event: 'frequency' in recurringData = 'None'
# Repopulates event data based on fields in event
#
# Updating All Events: recurringData.'is_all' is True
# Updates the specific values given within the recurringData
# Adds/removes the vols and pwas based on the 4 fields within recurringData
#
# Update This & Future Events: recurringData.'is_all' is False
# Sets end_date of recurrence to event.date and repopulates this & future events
# Adds vols and pwas based on the 4 fields within recurringData + pwa and volunteers fields
# {
#   "updateEventData": {
#     "id": 1,
#     "date": "2021-02-18",
#     "recurr_id": 33,
#     "name": "Washing Dishes",
#     "start_time": "12:30:00",
#     "end_time": "13:30:00",
#     "project_id": 3,
#     "note": "Cool cat",
#     "recurringData": {
#       "id": 2,
#       "day": 1,
#       "week": 1,
#       "interval": 1,
#       "name": "Washing Dishes",
#       "note": "Cool cat",
#       "start_time": "12:30:00",
#       "end_time": "13:30:00",
#       "frequency": "Weekly",
#       "start_date": "2021-01-14",
#       "end_date": "",
#       "vols_to_add": [{"vol_id": 4}],
#       "vols_to_remove": [1,2,4],
#       "pwas_to_add": [{"pwa_id": 4}],
#       "pwas_to_remove": [1,2,4],
#       "pwas": [3],
#       "volunteers": [6],
#       "is_all": true
#     },
#     "pwas": {
#       "data": [{
#         "pwa_id": 25
#       }]
#     },
#     "volunteers": {
#       "data": [{
#         "vol_id": 77
#       }]
#     }
#   }
# }